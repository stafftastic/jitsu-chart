{{- if .Values.tokenGenerator.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "jitsu.fullname" . }}-token-generator-{{ sha1sum (toJson .Values) | substr 0 8 }}
  labels:
    {{- include "jitsu.labels" . | nindent 4 }}
  {{- with .Values.tokenGenerator.jobAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        {{- include "jitsu.selectorLabels" . | nindent 8 }}
      {{- with (merge (deepCopy .Values.tokenGenerator.podAnnotations) .Values.global.podAnnotations) }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "jitsu.tokenGenerator.serviceAccountName" . }}
      {{- with (.Values.tokenGenerator.podSecurityContext | default .Values.global.podSecurityContext) }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: token-generator
          {{- with (.Values.tokenGenerator.securityContext | default .Values.global.securityContext) }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.tokenGenerator.image.tag }}
          image: "{{ .Values.tokenGenerator.image.repository }}:{{ .Values.tokenGenerator.image.tag }}"
          {{- else }}
          {{- $v := semver .Capabilities.KubeVersion.Version }}
          image: "{{ .Values.tokenGenerator.image.repository }}:{{ printf "%d.%d.%d" $v.Major $v.Minor $v.Patch }}"
          {{- end }}
          env:
            - name: FULLNAME
              value: {{ include "jitsu.fullname" . }}
            - name: SECRET_LENGTH
              value: {{ .Values.tokenGenerator.secretLength | default "32" | quote }}
            - name: TOKEN_LENGTH
              value: {{ .Values.tokenGenerator.tokenLength | default "32" | quote }}
            - name: SALT_LENGTH
              value: {{ .Values.tokenGenerator.saltLength | default "32" | quote }}
          {{- with (.Values.tokenGenerator.resources | default .Values.global.resources) }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command: ["sh", "-c"]
          args:
            - |
              if kubectl get secrets "$FULLNAME-tokens" > /dev/null 2>&1; then
                echo "Secret $FULLNAME-tokens already exists, skipping generation"
                exit 0
              fi
              set -e
              random_string() {
                length="$1"
                cat /dev/urandom | tr -dc 'a-zA-Z0-9_-' | head -c "$length"
              }
              hex_hash_token() {
                token="$1"
                salt="$2"
                secret="$3"
                echo -n "$token$salt$secret" | sha512sum | awk '{print $1}' | tr -d '\n'
              }
              globalHashSecret=$(random_string $SECRET_LENGTH)
              ingestTokenSecret=$(random_string $SECRET_LENGTH)
              bulkerTokenSecret=$(random_string $SECRET_LENGTH)
              syncctlTokenSecret=$(random_string $SECRET_LENGTH)
              rotorTokenSecret=$(random_string $SECRET_LENGTH)

              consoleAuthToken=$(random_string $TOKEN_LENGTH)
              ingestAuthToken=$(random_string $TOKEN_LENGTH)
              bulkerAuthToken=$(random_string $TOKEN_LENGTH)
              syncctlAuthToken=$(random_string $TOKEN_LENGTH)
              rotorAuthToken=$(random_string $TOKEN_LENGTH)

              consoleAuthTokenSalt=$(random_string $SALT_LENGTH)
              ingestAuthTokenSalt=$(random_string $SALT_LENGTH)
              bulkerAuthTokenSalt=$(random_string $SALT_LENGTH)
              syncctlAuthTokenSalt=$(random_string $SALT_LENGTH)
              rotorAuthTokenSalt=$(random_string $SALT_LENGTH)

              ingestAuthTokens="$ingestAuthTokenSalt.$(hex_hash_token $ingestAuthToken $ingestAuthTokenSalt $ingestTokenSecret)"
              bulkerAuthTokens="$bulkerAuthTokenSalt.$(hex_hash_token $bulkerAuthToken $bulkerAuthTokenSalt $bulkerTokenSecret)"
              syncctlAuthTokens="$syncctlAuthTokenSalt.$(hex_hash_token $syncctlAuthToken $syncctlAuthTokenSalt $syncctlTokenSecret)"
              consoleAuthTokens="$consoleAuthTokenSalt.$(hex_hash_token $consoleAuthToken $consoleAuthTokenSalt $globalHashSecret)"
              rotorAuthTokens="$rotorAuthTokenSalt.$(hex_hash_token $rotorAuthToken $rotorAuthTokenSalt $globalHashSecret)"

              kubectl apply -f- <<EOF
              apiVersion: v1
              kind: Secret
              metadata:
                name: $FULLNAME-tokens
              type: Opaque
              stringData:
                globalHashSecret: "$globalHashSecret"

                ingestTokenSecret: "$ingestTokenSecret"
                bulkerTokenSecret: "$bulkerTokenSecret"
                syncctlTokenSecret: "$syncctlTokenSecret"
                rotorTokenSecret: "$rotorTokenSecret"

                ingestAuthToken: "$ingestAuthToken"
                bulkerAuthToken: "$bulkerAuthToken"
                syncctlAuthToken: "$syncctlAuthToken"
                consoleAuthToken: "service-admin-account:$consoleAuthToken"
                rotorAuthToken: "$rotorAuthToken"

                ingestAuthTokens: "$ingestAuthTokens"
                bulkerAuthTokens: "$bulkerAuthTokens"
                syncctlAuthTokens: "$syncctlAuthTokens"
                consoleAuthTokens: "$consoleAuthTokens"
                rotorAuthTokens: "$rotorAuthTokens"
              EOF
      {{- with (.Values.tokenGenerator.nodeSelector | default .Values.global.nodeSelector) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (.Values.tokenGenerator.affinity | default .Values.global.affinity) }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (.Values.tokenGenerator.tolerations | default .Values.global.tolerations) }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
